package com.example.findme

import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.CheckBox
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import com.example.findme.database.DatabaseHelper
import com.example.findme.model.CellInfo
import com.example.findme.model.CellLocationResponse
import com.example.findme.model.CellRequest
import com.example.findme.model.PhoneNumberResponse
import com.example.findme.network.OpenCellIDApi
import com.example.findme.network.RetrofitClient
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : AppCompatActivity() {
    private lateinit var dbHelper: DatabaseHelper
    private lateinit var textViewLocation: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        dbHelper = DatabaseHelper(this)

        val editText = findViewById<EditText>(R.id.editTextNumber)
        val checkBox = findViewById<CheckBox>(R.id.checkBoxAccept)
        val button = findViewById<Button>(R.id.buttonSubmit)
        textViewLocation = findViewById(R.id.textViewLocation)

        val apiKey = RetrofitClient.getApiKey(this)

        checkBox.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                showAgreementDialog()
            }
        }

        button.setOnClickListener {
            val phoneNumber = editText.text.toString().trim()
            val agreementAccepted = checkBox.isChecked

            if (phoneNumber.isEmpty()) {
                Toast.makeText(this, "LÃ¼tfen bir telefon numarasÄ± girin", Toast.LENGTH_SHORT).show()
            } else if (!isValidPhoneNumber(phoneNumber)) {
                Toast.makeText(this, "LÃ¼tfen uygun formatta bir telefon numarasÄ± giriniz", Toast.LENGTH_SHORT).show()
            } else if (!agreementAccepted) {
                Toast.makeText(this, "ÅžartlarÄ± kabul etmelisiniz", Toast.LENGTH_SHORT).show()
            } else {
                fetchCellLocation(apiKey, phoneNumber)  // Telefon numarasÄ±nÄ± da gÃ¶nder
                validatePhoneNumber(phoneNumber)  // Girilen telefon numarasÄ±nÄ± doÄŸrulama
            }
        }
    }

    // ðŸ“Œ 1. OpenCellID API: CihazÄ±n lokasyon ve IP bilgilerini almak ve veritabanÄ±na kaydetmek
    private fun fetchCellLocation(apiKey: String, phoneNumber: String) {
        val api = RetrofitClient.cellIdInstance.create(OpenCellIDApi::class.java)
        val cellRequest = CellRequest(
            token = apiKey,
            radio = "gsm",
            mcc = 286,
            mnc = 1,
            cells = listOf(CellInfo(lac = 7033, cid = 17811))
        )

        api.getCellLocation(cellRequest).enqueue(object : Callback<CellLocationResponse> {
            override fun onResponse(call: Call<CellLocationResponse>, response: Response<CellLocationResponse>) {
                if (response.isSuccessful) {
                    response.body()?.let {
                        val latitude = it.lat ?: 0.0
                        val longitude = it.lon ?: 0.0
                        saveToDatabase(phoneNumber, "Bilinmiyor", latitude, longitude)
                    }
                } else {
                    Log.e("Cell API Error", "Baz istasyonu bilgisi alÄ±namadÄ±.")
                    Toast.makeText(this@MainActivity, "Baz istasyonu bilgisi alÄ±namadÄ±.", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<CellLocationResponse>, t: Throwable) {
                Log.e("Cell API Error", "Error: ${t.message}")
                Toast.makeText(this@MainActivity, "Baz istasyonu bilgisi alÄ±namadÄ±.", Toast.LENGTH_SHORT).show()
            }
        })
    }

    // ðŸ“Œ 2. PhoneNumber API: Girilen telefon numarasÄ±nÄ±n konum bilgilerini ekrana yazdÄ±rmak
    private fun validatePhoneNumber(phoneNumber: String) {
        val apiKey = RetrofitClient.getPhoneNumberApiKey(this)
        val api = RetrofitClient.phoneNumberApi

        api.validatePhoneNumber(apiKey, phoneNumber).enqueue(object : Callback<PhoneNumberResponse> {
            override fun onResponse(call: Call<PhoneNumberResponse>, response: Response<PhoneNumberResponse>) {
                if (response.isSuccessful) {
                    response.body()?.let {
                        val country = it.country_name ?: "Bilinmiyor"
                        val city = it.location ?: "Bilinmiyor"
                        showResult(phoneNumber, country, city)
                    }
                } else {
                    Log.e("API Error", "API baÅŸarÄ±sÄ±z yanÄ±t dÃ¶ndÃ¼.")
                    Toast.makeText(this@MainActivity, "API baÅŸarÄ±sÄ±z yanÄ±t dÃ¶ndÃ¼", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<PhoneNumberResponse>, t: Throwable) {
                Log.e("API Error", "Error: ${t.message}")
                Toast.makeText(this@MainActivity, "Numara doÄŸrulanamadÄ±.", Toast.LENGTH_SHORT).show()
            }
        })
    }

    // ðŸ“Œ SonuÃ§larÄ± ekrana yazdÄ±ran fonksiyon
    private fun showResult(phoneNumber: String, country: String, city: String) {
        val message = """
            Telefon NumarasÄ±: $phoneNumber
            Ãœlke: $country
            Åžehir: $city
        """.trimIndent()

        textViewLocation.text = message
    }

    // ðŸ“Œ VeritabanÄ±na kayÄ±t fonksiyonu
    private fun saveToDatabase(
        phoneNumber: String,
        ipAddress: String,
        latitude: Double,
        longitude: Double
    ) {
        val timestamp = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())

        val id = dbHelper.insertQueryLog(
            timestamp = timestamp,
            ipAddress = ipAddress,
            country = "Bilinmiyor",
            city = "Bilinmiyor",
            latitude = latitude,
            longitude = longitude,
            phoneNumber = phoneNumber,
            agreementAccepted = true
        )

        if (id != -1L) {
            Toast.makeText(this, "Veri baÅŸarÄ±yla kaydedildi.", Toast.LENGTH_SHORT).show()
        } else {
            Toast.makeText(this, "VeritabanÄ± hatasÄ±.", Toast.LENGTH_SHORT).show()
        }
    }

    // ðŸ“Œ Telefon numarasÄ± doÄŸrulama fonksiyonu
    private fun isValidPhoneNumber(number: String): Boolean {
        return number.matches("\\+\\d{12,14}".toRegex())
    }

    // ðŸ“Œ Åžartlar ve KoÅŸullar Dialog'u
    private fun showAgreementDialog() {
        val dialog = AlertDialog.Builder(this)
            .setTitle("Åžartlar ve KoÅŸullar")
            .setMessage("AnlaÅŸma")
            .setPositiveButton("Kabul Ediyorum") { dialog, _ ->
                dialog.dismiss()
            }
            .create()

        dialog.show()
    }
}